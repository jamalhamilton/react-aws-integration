{"version":3,"sources":["config/front_config.js","components/IDAuth.js","components/RegisterForm.js","App.js","serviceWorker.js","index.js"],"names":["siteUrl","clientId","idme","cliendId","clientSecret","redirectUrl","authEndPoint","aws","accessKey","secretKey","region","bucket","api","verifyID","getUser","registerUser","sendMail","updateUserInfo","videoConstraints","width","height","facingMode","mobileConstraints","exact","IDAuth","props","userToken","URLSearchParams","location","search","get","window","href","authStep","parseInt","substr","length","webcamRef","React","createRef","state","verifyURL","config","isPhotoTaken","imageSrc","photo_source","photo_target","uploadedPhoto","uploadedId","blob","resultMsg","msgColor","resultBtnStatus","uploadingProgress","apiTmr","photoCapture","bind","photoTake","comparePhoto","navToVerify","osStatus","getMobileOperatingSystem","userAgent","navigator","vendor","opera","test","MSStream","that","this","fetch","headers","method","body","JSON","stringify","token","then","res","json","data","status","id","setState","verify_photo","verify_idcard","clearInterval","setInterval","current","getScreenshot","console","log","AWS","update","accessKeyId","secretAccessKey","S3","params","Bucket","fileName","dataURItoBlob","imgFile","File","Key","name","ContentType","Body","putObject","err","alert","message","verifyType","setTimeout","on","progress","loaded","total","percent","errMsg","dataURI","binary","atob","split","mimeString","array","i","push","charCodeAt","Blob","Uint8Array","type","client","Rekognition","SourceImage","S3Object","Name","TargetImage","SimilarityThreshold","compareFaces","response","stack","FaceMatches","forEach","position","Face","BoundingBox","similarity","Similarity","Left","Top","verify_result","Container","style","textAlign","Row","marginTop","Col","Divider","src","marginBottom","display","screenshotFormat","ref","Button","variant","onClick","marginLeft","value","size","level","includeMargin","color","ProgressBar","now","label","animated","alt","Component","withRouter","RegisterForm","userInfo","candidate_name_first","candidate_name_last","candidate_email","date_of_interview","social_link","interviewer_name_first","interviewer_name_last","interviewer_email","isUploading","registerUserData","handleChange","getUsers","e","preventDefault","fname","target","Form","Group","as","onChange","Label","Control","placeholder","Text","className","dateformat","App","Navbar","expand","bg","Brand","Nav","path","children","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9842ad4f.chunk.js","sourcesContent":["const siteUrl = \"https://interverify.co\";\r\nconst redirectUrl = siteUrl + '/idme_code'\r\nconst clientId = \"34d614b8c18543abd81f338aaeb7b0de\"\r\n\r\nexport default {\r\n    siteUrl: siteUrl,\r\n    idme: {\r\n        cliendId: clientId,\r\n        clientSecret: \"949e15f3b1dace8c2a3c685032d4e28d\",\r\n        redirectUrl: redirectUrl,\r\n        authEndPoint: \"https://api.id.me/oauth/authorize?client_id=\" + clientId + \"&redirect_uri=\" + redirectUrl + \"&response_type=token&scope=loa3\",\r\n        \r\n    },\r\n    aws: {\r\n        accessKey: \"AKIAVJKPVCLEKM2YG33J\",\r\n        secretKey: \"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\",\r\n        region: \"us-east-2\",\r\n        bucket: \"idauth\"\r\n    },\r\n    api:{\r\n        // get requests\r\n        verifyID: '/verifyID', \r\n        \r\n        // post requests\r\n        getUser: '/api/getUser',\r\n        registerUser: '/api/registerUser',\r\n        sendMail: '/api/sendMail',\r\n        updateUserInfo: '/api/updateUserInfo',\r\n    }\r\n}","import React from \"react\";\r\nimport { Container, Row, Col, Button, ProgressBar } from \"react-bootstrap\";\r\nimport Webcam from \"react-webcam\";\r\nimport AWS from \"aws-sdk\";\r\nimport QRCode from \"qrcode.react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\n\r\nimport config from \"../config/front_config\";\r\nimport { Divider } from \"rsuite\";\r\n\r\nvar videoConstraints = {\r\n    width: 1280,\r\n    height: 720,\r\n    facingMode: 'user',\r\n};\r\n\r\nvar mobileConstraints = {\r\n    width: 1280,\r\n    height: 720,\r\n    facingMode: { exact: \"environment\" },\r\n};\r\n\r\n\r\nclass IDAuth extends React.Component {\r\n    // webcamRef = React.useRef(null);\r\n\r\n    constructor(props) {\r\n        super();\r\n\r\n        let query = new URLSearchParams(props.location.search);\r\n        let userToken = query.get('token');\r\n\r\n        if (!userToken) {\r\n            window.location.href = '/';\r\n            return;\r\n        }\r\n\r\n        let authStep = parseInt(userToken.substr(-1)) - 8;\r\n        userToken = userToken.substr(0, userToken.length - 1);\r\n\r\n        this.webcamRef = React.createRef();\r\n\r\n        this.state = {\r\n            userToken: userToken,\r\n            authStep: authStep,\r\n\r\n            verifyURL: config.siteUrl + config.api.verifyID + '?token=' + userToken + '9',\r\n\r\n            isPhotoTaken: false,\r\n            imageSrc: '',\r\n\r\n            photo_source: '',\r\n            photo_target: '',\r\n\r\n            uploadedPhoto: '',\r\n            uploadedId: '',\r\n\r\n            blob: '',\r\n\r\n            resultMsg: '',\r\n            msgColor: 'black',\r\n            resultBtnStatus: 0,\r\n\r\n            uploadingProgress: 0,\r\n\r\n            apiTmr: 0\r\n        };\r\n\r\n        this.photoCapture = this.photoCapture.bind(this);\r\n        this.photoTake = this.photoTake.bind(this);\r\n        this.comparePhoto = this.comparePhoto.bind(this);\r\n        this.navToVerify = this.navToVerify.bind(this);\r\n\r\n        var osStatus = this.getMobileOperatingSystem();\r\n        if(osStatus == 'Android' || osStatus == 'iOS'){\r\n            videoConstraints = mobileConstraints;\r\n        }\r\n    }\r\n\r\n    getMobileOperatingSystem() {\r\n        var userAgent = navigator.userAgent || navigator.vendor || window.opera;\r\n        // Windows Phone must come first because its UA also contains \"Android\"\r\n        if (/windows phone/i.test(userAgent)) {\r\n            return \"Windows Phone\";\r\n        }\r\n        if (/android/i.test(userAgent)) {\r\n            return \"Android\";\r\n        }\r\n        // iOS detection from: http://stackoverflow.com/a/9039885/177710\r\n        if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\r\n            return \"iOS\";\r\n        }\r\n        if (/JavaFX/.test(userAgent)) {\r\n            return 'JavaFx';\r\n        };\r\n        return \"unknown\";\r\n    }\r\n\r\n    componentDidMount() {\r\n        var that = this;\r\n        var { userToken } = this.state;\r\n        fetch(config.api.getUser, {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: \"POST\",\r\n            body: JSON.stringify({ token: userToken }),\r\n        }).then(res => res.json()).then(data => {\r\n            if (data.status) {\r\n                that.state.photo_source = data.data.id + '_face.jpg';\r\n                that.state.photo_target = data.data.id + '_id.jpg';\r\n            }\r\n            that.setState({\r\n                uploadedPhoto: data.data.verify_photo,\r\n                uploadedId: data.data.verify_idcard,\r\n            });\r\n        });\r\n\r\n        clearInterval(this.state.apiTmr);\r\n        if (!userToken) return;\r\n        this.state.apiTmr = setInterval(() => {\r\n            if (that.state.uploadedId) {\r\n                clearInterval(that.state.apiTmr);\r\n                return;\r\n            }\r\n            fetch(config.api.getUser, {\r\n                headers: { 'Content-Type': 'application/json' },\r\n                method: \"POST\",\r\n                body: JSON.stringify({ token: userToken }),\r\n            }).then(res => res.json()).then(data => {\r\n                that.setState({\r\n                    uploadedPhoto: data.data.verify_photo,\r\n                    uploadedId: data.data.verify_idcard,\r\n                });\r\n                if (data.data.verify_idcard) clearInterval(that.state.apiTmr);\r\n            });\r\n        }, 3000);\r\n\r\n    }\r\n\r\n    photoTake() {\r\n        var that = this;\r\n        var { isPhotoTaken } = this.state;\r\n\r\n        var imageSrc = '';\r\n        if (!isPhotoTaken) {\r\n            imageSrc = this.webcamRef.current.getScreenshot();\r\n            if (!imageSrc) {\r\n                this.setState({\r\n                    msgColor: 'red',\r\n                    resultMsg: 'Camera is not connected!!',\r\n                    imageSrc: ''\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            isPhotoTaken: !isPhotoTaken,\r\n            imageSrc: imageSrc\r\n        });\r\n\r\n        console.log('--------- imageSrc');\r\n    }\r\n\r\n    photoCapture() {\r\n        var that = this;\r\n        var { authStep, userToken, imageSrc } = this.state;\r\n\r\n        /////////////////////////////////        \r\n        // that.setState({\r\n        //     authStep: authStep + 1,\r\n        // });\r\n        // return;\r\n        /////////////////////////////////\r\n\r\n        var { photo_source, photo_target } = this.state;\r\n\r\n        AWS.config.update({\r\n            accessKeyId: config.aws.accessKey,\r\n            secretAccessKey: config.aws.secretKey,\r\n            region: config.aws.region\r\n        })\r\n        var bucket = new AWS.S3({ params: { Bucket: config.aws.bucket } })\r\n        var fileName = photo_source;\r\n        if (authStep === 1) fileName = photo_target;\r\n\r\n        imageSrc = this.dataURItoBlob(imageSrc);\r\n        var imgFile = new File([imageSrc], fileName);\r\n        // var params = { Key: imgFile.name, ContentType: imgFile.type, Body: imgFile, ServerSideEncryption: 'None' };\r\n        var params = { Key: imgFile.name, ContentType: \"image/jpeg\", Body: imgFile };\r\n        that.setState({\r\n            msgColor: 'black',\r\n            resultMsg: '',\r\n            uploadingProgress: .1,\r\n        })\r\n        bucket.putObject(params, function (err, data) {\r\n            if (!err) {\r\n                // alert('Uploading done!!!');\r\n                var verifyType = { verify_photo: fileName };\r\n                if (authStep === 1) verifyType = { verify_idcard: fileName };\r\n                verifyType.token = userToken\r\n                fetch(config.api.updateUserInfo, {\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    method: \"POST\",\r\n                    body: JSON.stringify(verifyType),\r\n                }).then(res => res.json()).then(data => {\r\n                    if (data.status) {\r\n                        that.setState({\r\n                            msgColor: 'black',\r\n                            resultMsg: 'Uploading done.',\r\n                        });\r\n                        console.log('-------- uploaded: ', data);\r\n                        setTimeout(function () {\r\n                            that.setState({\r\n                                authStep: 0,\r\n                                resultMsg: '',\r\n                                imageSrc: '',\r\n                                isPhotoTaken: false,\r\n                                resultBtnStatus: 0,\r\n                                uploadingProgress: 0\r\n                            });\r\n                        }, 1000);\r\n                    }\r\n                    console.log('data', data.data)\r\n                });\r\n            } else {\r\n                alert(err.message);\r\n                return false;\r\n            }\r\n        }).on('httpUploadProgress', function (progress) {\r\n            console.log('---- uploading progress: ', progress);\r\n            console.log('---- uploading progress: ', progress.loaded / progress.total * 100);\r\n\r\n            var percent = parseInt(progress.loaded / progress.total * 100);\r\n            that.setState({\r\n                uploadingProgress: percent\r\n            })\r\n        });\r\n    }\r\n\r\n    navToVerify() {\r\n        var that = this;\r\n        var { userToken } = this.state;\r\n\r\n        fetch(config.api.getUser, {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                token: userToken\r\n            }),\r\n        }).then(res => res.json()).then(data => {\r\n            if (data.status) {\r\n                var errMsg = ''\r\n                if (!data.data.verify_idcard) errMsg = \"You didn't upload id card photo.\";\r\n                if (!data.data.verify_photo) errMsg = \"You didn't upload face photo.\";\r\n                if (errMsg) {\r\n                    that.setState({\r\n                        msgColor: 'red',\r\n                        resultMsg: errMsg,\r\n                    });\r\n                    return;\r\n                }\r\n                that.setState({\r\n                    photo_source: data.data.verify_photo,\r\n                    photo_target: data.data.verify_idcard,\r\n                })\r\n                that.comparePhoto();\r\n                // setTimeout(function () {\r\n                //     that.setState({\r\n                //         authStep: 2,       //authStep + 1,\r\n                //         resultMsg: '',\r\n                //         resultBtnStatus: 0,\r\n                //         uploadingProgress: 0\r\n                //     });\r\n                // }, 1000);\r\n            } else {\r\n                that.setState({\r\n                    msgColor: 'red',\r\n                    resultMsg: 'Server connection failed.',\r\n                });\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    dataURItoBlob(dataURI) {\r\n        // convert base64/URLEncoded data component to raw binary data held in a string\r\n        var binary = atob(dataURI.split(',')[1]);\r\n        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n\r\n        // console.log('-- mimeString: ', mimeString);\r\n        var array = [];\r\n        for (var i = 0; i < binary.length; i++) {\r\n            array.push(binary.charCodeAt(i));\r\n        }\r\n        return new Blob([new Uint8Array(array)], { type: mimeString });\r\n    }\r\n\r\n    comparePhoto() {\r\n        var that = this;\r\n        var { resultBtnStatus, userToken } = that.state;\r\n        if (resultBtnStatus) {\r\n            that.setState({\r\n                authStep: 0,\r\n                resultBtnStatus: 0,\r\n            })\r\n            return;\r\n        }\r\n        const bucket = config.aws.bucket; // the bucketname without s3://\r\n\r\n        // const awsConfig = new AWS.Config({\r\n        //     accessKeyId: config.aws.accessKey,\r\n        //     secretAccessKey: config.aws.secretKey,\r\n        //     region: config.aws.region\r\n        // })\r\n\r\n        var { photo_source, photo_target } = this.state;\r\n\r\n        AWS.config.update({\r\n            accessKeyId: config.aws.accessKey,\r\n            secretAccessKey: config.aws.secretKey,\r\n            region: config.aws.region\r\n        })\r\n\r\n        const client = new AWS.Rekognition();\r\n        const params = {\r\n            SourceImage: {\r\n                S3Object: {\r\n                    Bucket: bucket,\r\n                    Name: photo_source,\r\n                },\r\n            },\r\n            TargetImage: {\r\n                S3Object: {\r\n                    Bucket: bucket,\r\n                    Name: photo_target,\r\n                },\r\n            },\r\n            SimilarityThreshold: 70,\r\n        };\r\n\r\n        console.log('-- compare 0')\r\n        try {\r\n            client.compareFaces(params, function (err, response) {\r\n                if (err) {\r\n                    console.log(err, err.stack); // an error occurred                    \r\n                    that.setState({\r\n                        resultBtnStatus: 1,\r\n                        msgColor: 'red',\r\n                        resultMsg: 'You didn\\'t upload exact personal photo.'\r\n                    })\r\n                    return;\r\n                }\r\n                if (!response.FaceMatches.length) {\r\n                    that.setState({\r\n                        resultBtnStatus: 1,\r\n                        msgColor: 'red',\r\n                        resultMsg: 'User and ID is not matched!'\r\n                    })\r\n                    return;\r\n                }\r\n                console.log('-- compare 1')\r\n                console.log('--- response.faceMatches: ', response.FaceMatches);\r\n\r\n                response.FaceMatches.forEach((data) => {\r\n                    console.log('-- compare 2 : ', data)\r\n                    let position = data.Face.BoundingBox;\r\n                    let similarity = data.Similarity;\r\n                    console.log(\r\n                        `The face at: ${position.Left}, ${position.Top} matches with ${similarity} % confidence`\r\n                    );\r\n                    fetch(config.api.updateUserInfo, {\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        method: \"POST\",\r\n                        body: JSON.stringify({\r\n                            token: userToken,\r\n                            verify_result: similarity\r\n                        }),\r\n                    }).then(res => res.json()).then(data => {\r\n                        if (data.status) {\r\n                            console.log('-------- uploaded: ', data);\r\n                            that.setState({\r\n                                resultBtnStatus: 1,\r\n                                msgColor: 'black',\r\n                                resultMsg: 'User\\'s similarity is : ' + similarity + '.'\r\n                            });\r\n                        }\r\n                        console.log('data', data.data)\r\n                    });\r\n                }); // for response.faceDetails\r\n            });\r\n        } catch (err) {\r\n            that.setState({\r\n                resultBtnStatus: 1,\r\n                msgColor: 'red',\r\n                resultMsg: 'You didn\\'t upload exact personal photo.'\r\n            })\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { authStep } = this.state;\r\n\r\n        return (\r\n            <Container style={{ textAlign: \"center\" }}>\r\n                {(authStep === 0) && (\r\n                    <div>\r\n                        <Row style={{ marginTop: 50 }}>\r\n                            <Col>\r\n                                <h1>\r\n                                    Step 2. Verify Your Information\r\n                                </h1>\r\n                            </Col>\r\n                        </Row>\r\n                        <Divider />\r\n                        <Row style={{ marginTop: 30 }}>\r\n                            <Col>\r\n                                <h4>Your Face Photo</h4>\r\n                                <img src={this.state.imageSrc}\r\n                                    style={{\r\n                                        marginBottom: 6,\r\n                                        display: (this.state.isPhotoTaken ? 'inline-block' : 'none')\r\n                                    }}\r\n                                />\r\n                                <Webcam\r\n                                    style={{ display: (!this.state.isPhotoTaken ? 'inline-block' : 'none') }}\r\n                                    videoConstraints={videoConstraints}\r\n                                    screenshotFormat=\"image/jpeg\"\r\n                                    ref={this.webcamRef}\r\n                                />\r\n                                <p>\r\n                                    <Button\r\n                                        variant=\"primary\"\r\n                                        onClick={this.photoTake}\r\n                                    >\r\n                                        {(this.state.isPhotoTaken) ? 'Retake Photo' : 'Take A Photo'}\r\n                                    </Button>\r\n                                    <Button\r\n                                        style={{\r\n                                            marginLeft: 30,\r\n                                            display: (this.state.isPhotoTaken ? 'inline-block' : 'none')\r\n                                        }}\r\n                                        variant=\"primary\"\r\n                                        onClick={this.photoCapture}\r\n                                    >\r\n                                        Upload\r\n                                    </Button>\r\n                                </p>\r\n                            </Col>\r\n                            {authStep === 0 && (\r\n                                <Col>\r\n                                    <h4>Your ID card</h4>\r\n                                    <QRCode\r\n                                        value={this.state.verifyURL}\r\n                                        size={256}\r\n                                        level={'Q'}\r\n                                        includeMargin={true}\r\n                                    />\r\n                                    <p><a href={this.state.verifyURL}>{this.state.verifyURL}</a></p>\r\n                                    {this.state.uploadedId ? (\r\n                                        <p style={{ color: 'red' }}>ID has been submitted.</p>\r\n                                    ) : (\r\n                                            <p>Please scan this link and upload id card on your phone.</p>\r\n                                        )}\r\n                                </Col>\r\n                            )}\r\n                        </Row>\r\n                        <Divider />\r\n                        <Row style={{ marginTop: 30 }}>\r\n                            <Col>\r\n                                <Button\r\n                                    variant=\"primary\"\r\n                                    onClick={this.navToVerify}\r\n                                >\r\n                                    Verify Information\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        {this.state.uploadingProgress > 0 && (\r\n                            <div>\r\n                                <Row style={{ marginTop: 30 }}>\r\n                                    <Col></Col>\r\n                                    <Col>\r\n                                        <ProgressBar\r\n                                            now={this.state.uploadingProgress}\r\n                                            label={this.state.uploadingProgress + '%'}\r\n                                            animated\r\n                                        />\r\n                                    </Col>\r\n                                    <Col></Col>\r\n                                </Row>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n\r\n                {(authStep === 1) && (\r\n                    <div>\r\n                        <Row style={{ marginTop: 50 }}>\r\n                            <Col>\r\n                                <h1>\r\n                                    Upload Your ID Card\r\n                                </h1>\r\n                            </Col>\r\n                        </Row>\r\n                        <Divider />\r\n                        <Row style={{ marginTop: 30 }}>\r\n                            <Col>\r\n                                <img src={this.state.imageSrc}\r\n                                    style={{\r\n                                        marginBottom: 6,\r\n                                        display: (this.state.isPhotoTaken ? 'inline-block' : 'none')\r\n                                    }}\r\n                                />\r\n                                <Webcam\r\n                                    style={{ display: (!this.state.isPhotoTaken ? 'inline-block' : 'none') }}\r\n                                    videoConstraints={videoConstraints}\r\n                                    screenshotFormat=\"image/jpeg\"\r\n                                    ref={this.webcamRef}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Divider />\r\n                        <Row style={{ marginTop: 30 }}>\r\n                            <Col>\r\n                                <p>\r\n                                    <Button\r\n                                        variant=\"primary\"\r\n                                        onClick={this.photoTake}\r\n                                    >\r\n                                        {(this.state.isPhotoTaken) ? 'Retake Photo' : 'Take A Photo'}\r\n                                    </Button>\r\n                                    <Button\r\n                                        style={{\r\n                                            marginLeft: 30,\r\n                                            display: (this.state.isPhotoTaken ? 'inline-block' : 'none')\r\n                                        }}\r\n                                        variant=\"primary\"\r\n                                        onClick={this.photoCapture}\r\n                                    >\r\n                                        Upload\r\n                                    </Button>\r\n                                </p>\r\n                            </Col>\r\n                        </Row>\r\n                        {this.state.uploadingProgress > 0 && (\r\n                            <div>\r\n                                <Row style={{ marginTop: 30 }}>\r\n                                    <Col></Col>\r\n                                    <Col>\r\n                                        <ProgressBar\r\n                                            now={this.state.uploadingProgress}\r\n                                            label={this.state.uploadingProgress + '%'}\r\n                                            animated\r\n                                        />\r\n                                    </Col>\r\n                                    <Col></Col>\r\n                                </Row>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n\r\n                {authStep === 2 && (\r\n                    <div>\r\n                        <Row style={{ marginTop: 50 }}>\r\n                            <Col>\r\n                                <h1>Step 2. Verify Your Identity</h1>\r\n                            </Col>\r\n                        </Row>\r\n                        <Divider />\r\n                        <Row style={{ marginTop: 30 }}>\r\n                            <Col>\r\n                                <Button\r\n                                    variant=\"primary\"\r\n                                    onClick={this.comparePhoto}\r\n                                >\r\n                                    {this.state.resultBtnStatus ? 'Upload again' : 'Verify'}\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                )}\r\n                <Row style={{ marginTop: 30, marginBottom: 30, color: this.state.msgColor }}>\r\n                    <Col>{this.state.resultMsg}</Col>\r\n                </Row>\r\n                {this.state.blob !== '' &&\r\n                    <img src={this.state.blob} alt=\"blob\" />\r\n                }\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(IDAuth);\r\n","import React from \"react\";\r\nimport { Container, Row, Col, Button, Form } from \"react-bootstrap\";\r\nimport { Divider } from 'rsuite';\r\n\r\nimport config from \"../config/front_config\";\r\n\r\nexport default class RegisterForm extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            userInfo: {\r\n                candidate_name_first: '',\r\n                candidate_name_last: '',\r\n                candidate_email: '',\r\n\r\n                date_of_interview: '',\r\n                social_link: '',\r\n\r\n                interviewer_name_first: '',\r\n                interviewer_name_last: '',\r\n                interviewer_email: '',\r\n            },\r\n\r\n            isUploading: false,\r\n        };\r\n\r\n        this.registerUserData = this.registerUserData.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(config.api.getUsers);\r\n    }\r\n\r\n    registerUserData(e) {\r\n        e.preventDefault();\r\n        var { userInfo, isUploading } = this.state;\r\n\r\n        console.log('------ userInfo: ', userInfo);\r\n        console.log('------ userInfo: ', userInfo);\r\n\r\n        if (isUploading) return;\r\n        this.setState({ isUploading: true });\r\n        fetch(config.api.registerUser, {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: \"POST\",\r\n            body: JSON.stringify(userInfo)\r\n        }).then(res => res.json()).then(data => {\r\n            if (data.status) {\r\n                fetch(config.api.sendMail, {\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    method: \"POST\",\r\n                    body: JSON.stringify({\r\n                        token: data.token\r\n                    }),\r\n                }).then(() => {\r\n                    alert('Email sent successfully to ' + userInfo.candidate_email + '. Please check it.');\r\n                    this.setState({ isUploading: false });\r\n                });\r\n            } else {\r\n                this.setState({ isUploading: false });\r\n            }\r\n            console.log('data', data.data)\r\n        });\r\n\r\n        // fetch(config.api.sendMail, {\r\n        //     headers: { 'Content-Type': 'application/json' },\r\n        //     method: \"POST\",\r\n        //     body: JSON.stringify({\r\n        //         token: '7DtjnxcKzKw8HtVkoWnH'\r\n        //     }),\r\n        // });\r\n\r\n    }\r\n\r\n    handleChange(e) {\r\n        var fname = e.target.name;\r\n        var value = e.target.value;\r\n        var { userInfo } = this.state;\r\n        userInfo[fname] = value;\r\n\r\n        this.state.userInfo = userInfo;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Container style={{ textAlign: \"center\" }}>\r\n                <div>\r\n                    <Row style={{ marginTop: 50 }}>\r\n                        <Col>\r\n                            <h1>\r\n                                Step 1. Register New User\r\n                                </h1>\r\n                        </Col>\r\n                    </Row>\r\n                    <Divider />\r\n                    <Form style={{ textAlign: \"left\" }}>\r\n                        <Row style={{ marginTop: 30 }}>\r\n                            <Form.Group as={Col}\r\n                                onChange={this.handleChange}\r\n                            >\r\n                                <Form.Label>Candidate Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\"\r\n                                    name=\"candidate_name_first\" />\r\n                                <Form.Text className=\"text-muted\">First Name</Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col}\r\n                                onChange={this.handleChange}\r\n                            >\r\n                                <Form.Label>&nbsp;</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\"\r\n                                    name=\"candidate_name_last\" />\r\n                                <Form.Text className=\"text-muted\">Last Name</Form.Text>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Group as={Col}\r\n                                onChange={this.handleChange}>\r\n                                <Form.Label>Candidate Email</Form.Label>\r\n                                <Form.Control type=\"email\" placeholder=\"\"\r\n                                    name=\"candidate_email\" />\r\n                                <Form.Text className=\"text-muted\">example@example.com</Form.Text>\r\n                            </Form.Group>\r\n                            <Col></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Group as={Col}\r\n                                onChange={this.handleChange}>\r\n                                <Form.Label>Date Of Interview</Form.Label>\r\n                                <Form.Control type=\"date\" placeholder=\"\"\r\n                                    dateformat=\"YYYY-MM-DD\"\r\n                                    name=\"date_of_interview\"\r\n                                />\r\n                                <Form.Text className=\"text-muted\">Date</Form.Text>\r\n                            </Form.Group>\r\n                            <Col></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Group as={Col}\r\n                                onChange={this.handleChange}>\r\n                                <Form.Label>Zoom, Skype, Bluejeans, Hirevue link</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\"\r\n                                    name=\"social_link\" />\r\n                                <Form.Text className=\"text-muted\">http://www.zoom.us/1234567890</Form.Text>\r\n                            </Form.Group>\r\n                            <Col></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Group as={Col}\r\n                                onChange={this.handleChange}>\r\n                                <Form.Label>Interviewer's Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\"\r\n                                    name=\"interviewer_name_first\" />\r\n                                <Form.Text className=\"text-muted\">First Name</Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group as={Col}\r\n                                onChange={this.handleChange}>\r\n                                <Form.Label>&nbsp;</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"\"\r\n                                    name=\"interviewer_name_last\" />\r\n                                <Form.Text className=\"text-muted\">Last Name</Form.Text>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row>\r\n                            <Form.Group as={Col}\r\n                                onChange={this.handleChange}>\r\n                                <Form.Label>Interviewer's Email</Form.Label>\r\n                                <Form.Control type=\"email\" placeholder=\"\"\r\n                                    name=\"interviewer_email\" />\r\n                                <Form.Text className=\"text-muted\">example@example.com</Form.Text>\r\n                            </Form.Group>\r\n                            <Col></Col>\r\n                        </Row>\r\n                        <Divider />\r\n                        <Row style={{ marginTop: 30, marginBottom: 30, textAlign: 'center' }}>\r\n                            <Col>\r\n                                <Button variant=\"primary\" type=\"submit\"\r\n                                    onClick={this.registerUserData}\r\n                                >{this.state.isUploading?'Uploading...':'Submit'}</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport IDAuth from \"./components/IDAuth\";\n// import IDMeCode from \"./components/IDMeCode\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport RegisterForm from \"./components/RegisterForm\";\nimport config from \"./config/front_config\";\n\nfunction App() {\n    return (\n        <Router>\n            <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n                <Navbar.Brand href=\"#\">ID Authenticate</Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                    {/* <Nav.Link href=\"/\">Home</Nav.Link>\n                    <Nav.Link href={config.api.verifyID}>\n                        ID Auth\n                    </Nav.Link> */}\n                </Nav>\n            </Navbar>\n\n            {/* A <Switch> looks through its children <Route>s and\nrenders the first one that matches the current URL. */}\n            <Switch>\n                <Route path={config.api.verifyID} children={<IDAuth />} />\n                <Route path=\"/\" children={<RegisterForm />} />\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}